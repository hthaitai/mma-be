const Payment = require("../models/payment.model");
const Subscription = require("../models/subscription.model");

const handlePaymentWebhook = async (req, res) => {
  try {
    console.log("--- Webhook received ---");
    const body = req.body;
    console.log("üì¶ Full Body (parsed):", JSON.stringify(body, null, 2));

    const data = body.data;
    if (!data || !data.orderCode || body.code !== "00" || data.code !== "00") {
      console.warn("‚ùå D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá");
      return res.status(400).json({ message: "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá" });
    }

    const orderCode = data.orderCode.toString();
    console.log("üîç ƒêang t√¨m v·ªõi order_code:", orderCode);

    const payment = await Payment.findOne({ order_code: orderCode });

    if (!payment) {
      const all = await Payment.find().lean();
      console.log(
        "üìã T·∫•t c·∫£ order_code trong DB:",
        all.map((p) => p.order_code)
      );
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y payment" });
    }

    if (payment.status === "PAID") {
      console.log("‚úÖ Payment ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω tr∆∞·ªõc ƒë√≥");
      return res
        .status(200)
        .json({ message: "Payment ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω tr∆∞·ªõc ƒë√≥" });
    }

    // C·∫≠p nh·∫≠t th√¥ng tin thanh to√°n
    payment.status = "PAID";
    payment.payment_date = new Date();
    await payment.save();

    console.log(`‚úÖ Payment ${orderCode} c·∫≠p nh·∫≠t th√†nh c√¥ng`);

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i subscription t∆∞∆°ng ·ª©ng (n·∫øu c·∫ßn)
    const subscription = await Subscription.findById(payment.subscription_id);
    if (subscription) {
      subscription.status = "active"; // ho·∫∑c tr·∫°ng th√°i ph√π h·ª£p v·ªõi app c·ªßa b·∫°n
      subscription.updatedAt = new Date();
      await subscription.save();

      console.log(`‚úÖ Subscription ${subscription._id} c·∫≠p nh·∫≠t th√†nh c√¥ng`);
    }

    return res.status(200).json({ message: "C·∫≠p nh·∫≠t th√†nh c√¥ng" });
  } catch (error) {
    console.error("‚ùå Webhook error:", error.message || error);
    return res.status(500).json({
      message: "L·ªói m√°y ch·ªß khi x·ª≠ l√Ω webhook",
      error: error.message || error,
    });
  }
};

exports.handlePaymentWebhook = handlePaymentWebhook;
